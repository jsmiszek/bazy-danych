-- 1, 2, 3 import plików przez gui

-- 4
SELECT COUNT(*) FROM 
(SELECT COUNT(popp.gid)
FROM popp, majrivers 
WHERE popp.f_codedesc LIKE 'Building' 
GROUP BY popp.gid 
HAVING MIN(ST_Distance(majrivers.geom, popp.geom)) < 100000) as liczba_budynków;

CREATE TABLE tableB AS SELECT popp.*
FROM popp, majrivers 
WHERE popp.f_codedesc LIKE 'Building' 
GROUP BY popp.gid 
HAVING MIN(ST_Distance(majrivers.geom, popp.geom)) < 100000;


-- 5
CREATE TABLE airportsNew 
AS SELECT name, geom, elev
FROM airports;

-- a
SELECT MAX(ST_Y(geom)), MIN(ST_Y(geom)) FROM airportsNew; 

-- b
INSERT INTO airportsNew VALUES 
('airportB', 
 ST_CENTROID(ST_MakeLine(
	 		(SELECT geom FROM airportsNew WHERE ST_Y(geom) = (SELECT MIN(ST_Y(geom)) FROM airportsNew)), 
		 	(SELECT geom FROM airportsNew WHERE ST_Y(geom) = (SELECT MAX(ST_Y(geom)) FROM airportsNew)))), 80);
 

-- 6
SELECT ST_Area(geometr)
FROM (SELECT ST_Buffer(ST_ShortestLine(
	(SELECT geom FROM lakes WHERE names='Iliamna Lake'),
	(SELECT geom FROM airports WHERE name='AMBLER')), 1000) AS geometr)
	AS pole;


-- 7
SELECT res.vegdesc, sum(res.sum) FROM
 (SELECT vegdesc, SUM(trees.area_km2) 
	FROM trees JOIN tundra ON ST_Contains(tundra.geom, trees.geom) 
	GROUP BY vegdesc
	UNION ALL
 	SELECT vegdesc, SUM(trees.area_km2) 
	FROM trees JOIN swamp ON ST_Contains(swamp.geom, trees.geom) 
	GROUP BY vegdesc) AS res
GROUP BY res.vegdesc;
